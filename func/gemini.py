from aiogram import types
from aiogram.fsm.context import FSMContext
from config import Form,  bot
from database import load_context,save_context,av_models
import asyncio
import base64
import logging
from aiogram.enums import ParseMode
from func.messages import fix_markdown
import google.generativeai as genai

async def handle_image(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_context = await load_context(user_id)

    photo = message.photo[-1]
    file_id = photo.file_id

    file = await bot.get_file(file_id)
    file_path = file.file_path

    image_data = await bot.download_file(file_path)

    base64_image = await asyncio.to_thread(
        lambda: base64.b64encode(image_data.read()).decode('utf-8')
    )

    user_context["messages"].append({
        "role": "user",
        "parts": [
            {"mime_type": "image/jpeg", "data": base64_image}
        ]
    })

    await save_context(user_id, user_context)
    await state.update_data(image_data=base64_image)
    await message.reply("üîî–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.")


async def process_custom_image_prompt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    prompt = message.text

    data = await state.get_data()
    base64_image = data.get("image_data")

    if not base64_image:
        await message.reply("üîî–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    user_context = await load_context(user_id)
    model_key = user_context["model"]  # –§–æ—Ä–º–∞—Ç: "model_id_api"
    model_id, api_type = model_key.split('_')

    new_message = {
        "role": "user",
        "parts": [
            {"text": prompt},
            {"mime_type": "image/jpeg", "data": base64_image}
        ]
    }

    user_context["messages"].append(new_message)

    await save_context(user_id, user_context)
    
    try:
        model = genai.GenerativeModel(model_id)
        chat = model.start_chat(history=user_context["messages"][:-1])
        response = await asyncio.to_thread(
            lambda: chat.send_message(user_context["messages"][-1])
        )

        await bot.send_message(user_id, response.text, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ Markdown –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await bot.send_message(user_id,
                f"üîî–ü–æ–ø—ã—Ç–∫–∞ —Ñ–∏–∫—Å–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            )
            fixed_response = await fix_markdown(response.text)
            await bot.send_message(user_id, fixed_response, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            await bot.send_message(user_id,
                f"üö®–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\n\n"
                "–û—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
            await bot.send_message(user_id, response.text)

        user_context["messages"].append({"role": "assistant", "content": response.text})
        await save_context(user_id, user_context)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥–µ–ª—å—é Gemini: {e}")
        await bot.send_message(user_id, f"üö®–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥–µ–ª—å—é Gemini: {e}")

    await state.set_state(Form.waiting_for_message)
    await state.update_data(image_data=None)

async def handle_pdf(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_context = await load_context(user_id)

    file_id = message.document.file_id

    file = await bot.get_file(file_id)
    file_path = file.file_path

    pdf_data = await bot.download_file(file_path)

    base64_pdf = await asyncio.to_thread(
        lambda: base64.b64encode(pdf_data.read()).decode('utf-8')
    )

    user_context["messages"].append({
        "role": "user",
        "parts": [
            {"mime_type": "application/pdf", "data": base64_pdf}
        ]
    })

    await save_context(user_id, user_context)

    await message.reply("üîîPDF-—Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
    await state.set_state(Form.waiting_for_message)

